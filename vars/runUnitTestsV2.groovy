// vars/runUnitTestsV2.groovy
/* Examples
    --Only mandatory parameters without optional
        runUnitTestsV2(shouldGenerateHtmlCoverageReport)

    --With optional parameters. Optional should go only after mandatory. The order of the passed optional parameters is not important
        runUnitTestsV2(
            shouldGenerateHtmlCoverageReport,
            coverletCollectorSettings: "coverlet.collector.settings.xml",
            testAssemblies: testAssemblies)

    --OptionalParameters
        solutionRelativePath
        coverletCollectorSettings
        testAssemblies
        testAssembliesSequential
*/
def call(Map optionalParameters = [:], boolean generateHtmlCoverageReport)
{
    def solutionRelativePath = optionalParameters.solutionRelativePath ?: ""
    def coverletCollectorSettings = optionalParameters.coverletCollectorSettings ?: ""
    def testAssemblies = optionalParameters.testAssemblies ?: [] as String[]
    def testAssembliesSequential = optionalParameters.testAssembliesSequential ?: [] as String[]
	def testAssembliesCount = testAssemblies.size() + testAssembliesSequential.size()

	if(generateHtmlCoverageReport)
	{
		getTestCoverageUrl()
	}

	def commandLineArgs = "--collect:'XPlat Code Coverage' -- " +
							"DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format='opencover' " +
							"DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.IncludeTestAssembly='false' " +
							"DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.SkipAutoProps='true' " +
							"DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByAttribute='TestSDKAutoGeneratedCode,ExcludeFromCodeCoverageAttribute,GeneratedCodeAttribute'"

	if(!(coverletCollectorSettings == null || coverletCollectorSettings.isEmpty()))
	{
		commandLineArgs = "--settings:${coverletCollectorSettings}"
	}

	if(testAssembliesCount > 0)
	{
		echo "Running Consolidated tests"

		if(testAssemblies.size() > 0)
		{
			sh "dotnet new sln --name consolidated.tests"
			for(int i = 0; i < testAssemblies.size(); i++)
			{
				sh "dotnet sln consolidated.tests.sln add ${testAssemblies[i]}"
			}

			sh "dotnet test consolidated.tests.sln ${commandLineArgs}"
		}

		for(int i = 0; i < testAssembliesSequential.size(); i++)
		{
			def testAssembly = testAssembliesSequential[i]
			echo "-Running Tests: ${testAssembly}"
			sh "dotnet test ${testAssembly} ${commandLineArgs}"
		}
	}
	else
	{
		echo "Running tests for entire solution"
		sh "dotnet test ${solutionRelativePath} ${commandLineArgs}"
	}

	if(generateHtmlCoverageReport)
	{
		pushTestCoverageToS3Bucket()
	}
}